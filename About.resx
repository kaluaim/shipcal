<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A4fgAAMP8AAAP/gAAf//gP////////////8=
</value>
  </data>
</root>